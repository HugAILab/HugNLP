{"idx": "0", "func1": "public static void copyFile(File source, File dest) throws IOException { FileChannel in = null, out = null; try { in = new FileInputStream(source).getChannel(); out = new FileOutputStream(dest).getChannel(); in.transferTo(0, in.size(), out); } catch (FileNotFoundException fnfe) { Log.debug(fnfe); } finally { if (in != null) in.close(); if (out != null) out.close(); } }", "func2": "public static void copyFile(File from, File to) throws IOException { if (from.isDirectory()) { if (!to.exists()) { to.mkdir(); } File[] children = from.listFiles(); for (int i = 0; i < children.length; i++) { if (children[i].getName().equals(\".\") || children[i].getName().equals(\"..\")) { continue; } if (children[i].isDirectory()) { File f = new File(to, children[i].getName()); copyFile(children[i], f); } else { copyFile(children[i], to); } } } else if (from.isFile() && (to.isDirectory() || to.isFile())) { if (to.isDirectory()) { to = new File(to, from.getName()); } FileInputStream in = new FileInputStream(from); FileOutputStream out = new FileOutputStream(to); byte[] buf = new byte[32678]; int read; while ((read = in.read(buf)) > -1) { out.write(buf, 0, read); } closeStream(in); closeStream(out); } }", "label": "0", "pseudo_proba": "0.8423878"}
{"idx": "1", "func1": "public static void copyFile(File in, File out) throws Exception { FileChannel sourceChannel = null; FileChannel destinationChannel = null; try { sourceChannel = new FileInputStream(in).getChannel(); destinationChannel = new FileOutputStream(out).getChannel(); sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel); } finally { if (sourceChannel != null) sourceChannel.close(); if (destinationChannel != null) destinationChannel.close(); } }", "func2": "private void bootKernel(String conf) { try { AssetManager am = getResources().getAssets(); InputStream is = am.open(conf + \".conf\"); Properties props = new Properties(); props.load(is); is.close(); Log.d(\"bootKernel\", \"Listing sdcard assets...\"); String[] sdcardfiles = am.list(\"sdcard\"); for (String file : sdcardfiles) { Log.d(\"bootKernel\", \"Copying sdcard asset \" + file + \".\"); AssetFileDescriptor afd = am.openFd(\"sdcard/\" + file); FileInputStream fis = afd.createInputStream(); FileChannel fic = fis.getChannel(); FileOutputStream fos = new FileOutputStream(\"/sdcard/\" + file); FileChannel foc = fos.getChannel(); fic.transferTo(0, fic.size(), foc); fic.close(); foc.close(); } Configuration gconf = new JavaPropertiesConfiguration(props); Configuration bconf = gconf.subset(\"boot\"); String kclass_name = bconf.getString(\"kernel\"); Log.d(\"bootKernel\", \"Attempting to load kernel from class '\" + kclass_name + \"'...\"); Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class); Kernel kernel = kclass.newInstance(); Log.d(\"bootKernel\", \"Kernel loaded, proceeding with boot...\"); BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class); kernel.boot(bctx).get(); Log.d(\"bootKernel\", \"Kernel boot complete.\"); } catch (Exception e) { Log.e(\"bootKernel\", \"Unable to boot kernel due to exception.\", e); finish(); } }", "label": "0", "pseudo_proba": "0.7429054"}
{"idx": "2", "func1": "public static void BubbleSortShort2(short[] num) { int last_exchange; int right_border = num.length - 1; do { last_exchange = 0; for (int j = 0; j < num.length - 1; j++) { if (num[j] > num[j + 1]) { short temp = num[j]; num[j] = num[j + 1]; num[j + 1] = temp; last_exchange = j; } } right_border = last_exchange; } while (right_border > 0); }", "func2": "public static InputStream getResourceAsStreamIfAny(String resPath) { URL url = findResource(resPath); try { return url == null ? null : url.openStream(); } catch (IOException e) { ZMLog.warn(e, \" URL open Connection got an exception!\"); return null; } }", "label": "0", "pseudo_proba": "0.7888649"}
{"idx": "3", "func1": "public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException { MessageDigest md; md = MessageDigest.getInstance(\"SHA-1\"); byte[] sha1hash = new byte[40]; md.update(text.getBytes(\"UTF-8\"), 0, text.length()); sha1hash = md.digest(); return convertToHex(sha1hash); }", "func2": "public static void doVersionCheck(View view) { view.showWaitCursor(); try { URL url = new URL(jEdit.getProperty(\"version-check.url\")); InputStream in = url.openStream(); BufferedReader bin = new BufferedReader(new InputStreamReader(in)); String line; String develBuild = null; String stableBuild = null; while ((line = bin.readLine()) != null) { if (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim(); } bin.close(); if (develBuild != null && stableBuild != null) { doVersionCheck(view, stableBuild, develBuild); } } catch (IOException e) { String[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() }; GUIUtilities.error(view, \"read-error\", args); } view.hideWaitCursor(); }", "label": "0", "pseudo_proba": "0.8284576"}
{"idx": "4", "func1": "public void updateUser(User portalUserBean, AuthSession authSession) { DatabaseAdapter dbDyn = null; PreparedStatement ps = null; try { dbDyn = DatabaseAdapter.getInstance(); String sql = \"update WM_LIST_USER \" + \"set FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, \" + \" ADDRESS=?,TELEPHONE=?,EMAIL=? \" + \"where ID_USER=? and is_deleted=0 and ID_FIRM in \"; switch(dbDyn.getFamaly()) { case DatabaseManager.MYSQL_FAMALY: String idList = authSession.getGrantedCompanyId(); sql += \" (\" + idList + \") \"; break; default: sql += \"(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)\"; break; } ps = dbDyn.prepareStatement(sql); int num = 1; ps.setString(num++, portalUserBean.getFirstName()); ps.setString(num++, portalUserBean.getMiddleName()); ps.setString(num++, portalUserBean.getLastName()); ps.setString(num++, portalUserBean.getAddress()); ps.setString(num++, portalUserBean.getPhone()); ps.setString(num++, portalUserBean.getEmail()); ps.setLong(num++, portalUserBean.getUserId()); switch(dbDyn.getFamaly()) { case DatabaseManager.MYSQL_FAMALY: break; default: ps.setString(num++, authSession.getUserLogin()); break; } int i1 = ps.executeUpdate(); if (log.isDebugEnabled()) log.debug(\"Count of updated record - \" + i1); dbDyn.commit(); } catch (Exception e) { try { if (dbDyn != null) { dbDyn.rollback(); } } catch (Exception e001) { } String es = \"Error update of portal user\"; log.error(es, e); throw new IllegalStateException(es, e); } finally { DatabaseManager.close(dbDyn, ps); dbDyn = null; ps = null; } }", "func2": "static void copy(String src, String dest) throws IOException { File ifp = new File(src); File ofp = new File(dest); if (ifp.exists() == false) { throw new IOException(\"file '\" + src + \"' does not exist\"); } FileInputStream fis = new FileInputStream(ifp); FileOutputStream fos = new FileOutputStream(ofp); byte[] b = new byte[1024]; while (fis.read(b) > 0) fos.write(b); fis.close(); fos.close(); }", "label": "0", "pseudo_proba": "0.706912"}
