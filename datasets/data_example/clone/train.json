{"label": "0", "func1":"    private void setNodekeyInJsonResponse(String service) throws Exception {\n        String filename = this.baseDirectory + service + \".json\";\n        Scanner s = new Scanner(new File(filename));\n        PrintWriter fw = new PrintWriter(new File(filename + \".new\"));\n        while (s.hasNextLine()) {\n            fw.println(s.nextLine().replaceAll(\"NODEKEY\", this.key));\n        }\n        s.close();\n        fw.close();\n        (new File(filename + \".new\")).renameTo(new File(filename));\n    }\n", "func2":"    public void transform(String style, String spec, OutputStream out) throws IOException {\n        URL url = new URL(rootURL, spec);\n        InputStream in = new PatchXMLSymbolsStream(new StripDoctypeStream(url.openStream()));\n        transform(style, in, out);\n        in.close();\n    }\n", "id": 1}
{"label": "1", "func1":"    public static void test(String args[]) {\n        int trace;\n        int bytes_read = 0;\n        int last_contentLenght = 0;\n        try {\n            BufferedReader reader;\n            URL url;\n            url = new URL(args[0]);\n            URLConnection istream = url.openConnection();\n            last_contentLenght = istream.getContentLength();\n            reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));\n            System.out.println(url.toString());\n            String line;\n            trace = t2pNewTrace();\n            while ((line = reader.readLine()) != null) {\n                bytes_read = bytes_read + line.length() + 1;\n                t2pProcessLine(trace, line);\n            }\n            t2pHandleEventPairs(trace);\n            t2pSort(trace, 0);\n            t2pExportTrace(trace, new String(\"pngtest2.png\"), 1000, 700, (float) 0, (float) 33);\n            t2pExportTrace(trace, new String(\"pngtest3.png\"), 1000, 700, (float) 2.3, (float) 2.44);\n            System.out.println(\"Press any key to contiune read from stream !!!\");\n            System.out.println(t2pGetProcessName(trace, 0));\n            System.in.read();\n            istream = url.openConnection();\n            if (last_contentLenght != istream.getContentLength()) {\n                istream = url.openConnection();\n                istream.setRequestProperty(\"Range\", \"bytes=\" + Integer.toString(bytes_read) + \"-\");\n                System.out.println(Integer.toString(istream.getContentLength()));\n                reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));\n                while ((line = reader.readLine()) != null) {\n                    System.out.println(line);\n                    t2pProcessLine(trace, line);\n                }\n            } else System.out.println(\"File not changed !\");\n            t2pDeleteTrace(trace);\n        } catch (MalformedURLException e) {\n            System.out.println(\"MalformedURLException !!!\");\n        } catch (IOException e) {\n            System.out.println(\"File not found \" + args[0]);\n        }\n        ;\n    }\n", "func2":"    private static String loadUrlToString(String a_url) throws IOException {\n        URL l_url1 = new URL(a_url);\n        BufferedReader br = new BufferedReader(new InputStreamReader(l_url1.openStream()));\n        String l_content = \"\";\n        String l_ligne = null;\n        l_content = br.readLine();\n        while ((l_ligne = br.readLine()) != null) {\n            l_content += AA.SL + l_ligne;\n        }\n        return l_content;\n    }\n", "id": 2}
{"label": "1", "func1":"    public String kodetu(String testusoila) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n            md.update(testusoila.getBytes(\"UTF-8\"));\n        } catch (NoSuchAlgorithmException e) {\n            new MezuLeiho(\"Ez da zifraketa algoritmoa aurkitu\", \"Ados\", \"Zifraketa Arazoa\", JOptionPane.ERROR_MESSAGE);\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            new MezuLeiho(\"Errorea kodetzerakoan\", \"Ados\", \"Kodeketa Errorea\", JOptionPane.ERROR_MESSAGE);\n            e.printStackTrace();\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n", "func2":"    private StringBuffer encoder(String arg) {\n        if (arg == null) {\n            arg = \"\";\n        }\n        MessageDigest md5 = null;\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(arg.getBytes(SysConstant.charset));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return toHex(md5.digest());\n    }\n", "id": 3}
{"label": "0", "func1":"    public static void printResponseHeaders(String address) {\n        logger.info(\"Address: \" + address);\n        try {\n            URL url = new URL(address);\n            URLConnection conn = url.openConnection();\n            for (int i = 0; ; i++) {\n                String headerName = conn.getHeaderFieldKey(i);\n                String headerValue = conn.getHeaderField(i);\n                if (headerName == null && headerValue == null) {\n                    break;\n                }\n                if (headerName == null) {\n                    logger.info(headerValue);\n                    continue;\n                }\n                logger.info(headerName + \" \" + headerValue);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception Message: \" + e.getMessage());\n        }\n    }\n", "func2":"    public static String getEncodedPassword(String buff) {\n        if (buff == null) return null;\n        String t = new String();\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(buff.getBytes());\n            byte[] r = md.digest();\n            for (int i = 0; i < r.length; i++) {\n                t += toHexString(r[i]);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return t;\n    }\n", "id": 4}
{"label": "0", "func1":"    public void load(String fileName) {\n        BufferedReader bufReader;\n        loaded = false;\n        vector.removeAllElements();\n        try {\n            if (fileName.startsWith(\"http:\")) {\n                URL url = new URL(fileName);\n                bufReader = new BufferedReader(new InputStreamReader(url.openStream()));\n            } else bufReader = new BufferedReader(new FileReader(fileName));\n            String inputLine;\n            while ((inputLine = bufReader.readLine()) != null) {\n                if (listener != null) listener.handleLine(inputLine); else vector.add(inputLine);\n            }\n            bufReader.close();\n            loaded = true;\n        } catch (IOException e) {\n            errorMsg = e.getMessage();\n        }\n    }\n", "func2":"    private static void copyFile(File sourceFile, File destFile) {\n        try {\n            if (!destFile.exists()) {\n                destFile.createNewFile();\n            }\n            FileChannel source = null;\n            FileChannel destination = null;\n            try {\n                source = new FileInputStream(sourceFile).getChannel();\n                destination = new FileOutputStream(destFile).getChannel();\n                destination.transferFrom(source, 0, source.size());\n            } finally {\n                if (source != null) {\n                    source.close();\n                }\n                if (destination != null) {\n                    destination.close();\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "id": 5}
{"label": "1", "func1":"    private String sha1(String s) {\n        String encrypt = s;\n        try {\n            MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n            sha.update(s.getBytes());\n            byte[] digest = sha.digest();\n            final StringBuffer buffer = new StringBuffer();\n            for (int i = 0; i < digest.length; ++i) {\n                final byte b = digest[i];\n                final int value = (b & 0x7F) + (b < 0 ? 128 : 0);\n                buffer.append(value < 16 ? \"0\" : \"\");\n                buffer.append(Integer.toHexString(value));\n            }\n            encrypt = buffer.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return encrypt;\n    }\n", "func2":"    @SuppressWarnings(\"unused\")\n    private String getMD5(String value) {\n        MessageDigest md5;\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            return \"\";\n        }\n        md5.reset();\n        md5.update(value.getBytes());\n        byte[] messageDigest = md5.digest();\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < messageDigest.length; i++) {\n            hexString.append(Integer.toHexString(0xFF & messageDigest[i]));\n        }\n        String hashedPassword = hexString.toString();\n        return hashedPassword;\n    }\n", "id": 6}
