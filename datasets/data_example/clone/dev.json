{"label": "0", "func1":"    public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException {\n        document = doc;\n        PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary();\n        if (encryptionDictionary == null) {\n            encryptionDictionary = new PDEncryptionDictionary();\n        }\n        version = computeVersionNumber();\n        revision = computeRevisionNumber();\n        encryptionDictionary.setFilter(FILTER);\n        encryptionDictionary.setVersion(version);\n        encryptionDictionary.setRevision(revision);\n        encryptionDictionary.setLength(keyLength);\n        String ownerPassword = policy.getOwnerPassword();\n        String userPassword = policy.getUserPassword();\n        if (ownerPassword == null) {\n            ownerPassword = \"\";\n        }\n        if (userPassword == null) {\n            userPassword = \"\";\n        }\n        int permissionInt = policy.getPermissions().getPermissionBytes();\n        encryptionDictionary.setPermissions(permissionInt);\n        int length = keyLength / 8;\n        COSArray idArray = document.getDocument().getDocumentID();\n        if (idArray == null || idArray.size() < 2) {\n            idArray = new COSArray();\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"MD5\");\n                BigInteger time = BigInteger.valueOf(System.currentTimeMillis());\n                md.update(time.toByteArray());\n                md.update(ownerPassword.getBytes());\n                md.update(userPassword.getBytes());\n                md.update(document.getDocument().toString().getBytes());\n                byte[] id = md.digest(this.toString().getBytes());\n                COSString idString = new COSString();\n                idString.append(id);\n                idArray.add(idString);\n                idArray.add(idString);\n                document.getDocument().setDocumentID(idArray);\n            } catch (NoSuchAlgorithmException e) {\n                throw new CryptographyException(e);\n            } catch (IOException e) {\n                throw new CryptographyException(e);\n            }\n        }\n        COSString id = (COSString) idArray.getObject(0);\n        byte[] o = computeOwnerPassword(ownerPassword.getBytes(\"ISO-8859-1\"), userPassword.getBytes(\"ISO-8859-1\"), revision, length);\n        byte[] u = computeUserPassword(userPassword.getBytes(\"ISO-8859-1\"), o, permissionInt, id.getBytes(), revision, length);\n        encryptionKey = computeEncryptedKey(userPassword.getBytes(\"ISO-8859-1\"), o, permissionInt, id.getBytes(), revision, length);\n        encryptionDictionary.setOwnerKey(o);\n        encryptionDictionary.setUserKey(u);\n        document.setEncryptionDictionary(encryptionDictionary);\n        document.getDocument().setEncryptionDictionary(encryptionDictionary.getCOSDictionary());\n    }\n", "func2":"    public static void main(String[] args) throws Exception {\n        String uri = args[0];\n        Configuration conf = new Configuration();\n        FileSystem fs = FileSystem.get(URI.create(uri), conf);\n        Path inputPath = new Path(uri);\n        CompressionCodecFactory factory = new CompressionCodecFactory(conf);\n        CompressionCodec codec = factory.getCodec(inputPath);\n        if (codec == null) {\n            System.err.println(\"No codec found for \" + uri);\n            System.exit(1);\n        }\n        String outputUri = CompressionCodecFactory.removeSuffix(uri, codec.getDefaultExtension());\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = codec.createInputStream(fs.open(inputPath));\n            out = fs.create(new Path(outputUri));\n            IOUtils.copyBytes(in, out, conf);\n        } finally {\n            IOUtils.closeStream(in);\n            IOUtils.closeStream(out);\n        }\n    }\n", "id": 1}
{"label": "1", "func1":"    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "func2":"    public static void main(String[] args) {\n        try {\n            Object o = Naming.lookup(\"Server\");\n            IServer serverStub = (IServer) o;\n            File srcDir = new File(args[0]);\n            File dstDir = new File(args[1]);\n            File[] srcFiles = srcDir.listFiles();\n            long position = 0;\n            for (File f : srcFiles) {\n                if (f.isDirectory()) continue;\n                try {\n                    FileChannel srcChannel = new FileInputStream(f).getChannel();\n                    String fileName = dstDir.getAbsolutePath() + System.getProperty(\"file.separator\") + f.getName();\n                    FileChannel dstChannel = new FileOutputStream(fileName).getChannel();\n                    System.out.println(\"Coping \" + fileName);\n                    ByteBuffer buffer = ByteBuffer.allocate(65536);\n                    int nr = 0;\n                    srcChannel.position(nr);\n                    nr = srcChannel.read(buffer);\n                    while (nr > -1) {\n                        buffer.flip();\n                        byte[] bytes = new byte[buffer.limit()];\n                        buffer.get(bytes);\n                        position = serverStub.write(bytes, position);\n                        buffer.clear();\n                        nr = srcChannel.read(buffer);\n                    }\n                    System.out.println(\"Done \");\n                    srcChannel.close();\n                    dstChannel.close();\n                } catch (IOException e) {\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        } catch (NotBoundException e) {\n            e.printStackTrace();\n        }\n    }\n", "id": 2}
{"label": "0", "func1":"    public static String send(String purl, String xml) throws Exception {\n        URL url = new URL(purl);\n        HttpURLConnection httpUrlCon = (HttpURLConnection) url.openConnection();\n        httpUrlCon.setRequestMethod(\"POST\");\n        httpUrlCon.setDoOutput(true);\n        PrintWriter writer = new PrintWriter(httpUrlCon.getOutputStream());\n        writer.println(xml);\n        writer.flush();\n        writer.close();\n        System.out.println(\"Sending: \" + xml);\n        StringBuffer response = new StringBuffer();\n        InputStreamReader is = null;\n        try {\n            is = new InputStreamReader(httpUrlCon.getInputStream());\n        } catch (Exception e) {\n            e.printStackTrace();\n            is = new InputStreamReader(httpUrlCon.getErrorStream());\n        }\n        BufferedReader br = new BufferedReader(is);\n        String line = null;\n        while ((line = br.readLine()) != null) {\n            response.append(line);\n            response.append(\"\\n\");\n        }\n        String r = response.toString();\n        return r;\n    }\n", "func2":"    protected String doIt() throws java.lang.Exception {\n        StringBuffer sql = null;\n        int no = 0;\n        String clientCheck = \" AND AD_Client_ID=\" + m_AD_Client_ID;\n        if (m_deleteOldImported) {\n            sql = new StringBuffer(\"DELETE I_BPartner \" + \"WHERE I_IsImported='Y'\").append(clientCheck);\n            no = DB.executeUpdate(sql.toString());\n            log.fine(\"Delete Old Impored =\" + no);\n        }\n        sql = new StringBuffer(\"UPDATE I_BPartner \" + \"SET AD_Client_ID = COALESCE(AD_Client_ID, \").append(m_AD_Client_ID).append(\"),\" + \" AD_Org_ID = COALESCE(AD_Org_ID, 0),\" + \" IsActive = COALESCE(IsActive, 'Y'),\" + \" Created = COALESCE(Created, current_timestamp),\" + \" CreatedBy = COALESCE(CreatedBy, 0),\" + \" Updated = COALESCE(Updated, current_timestamp),\" + \" UpdatedBy = COALESCE(UpdatedBy, 0),\" + \" I_ErrorMsg = '',\" + \" I_IsImported = 'N' \" + \"WHERE I_IsImported<>'Y' OR I_IsImported IS NULL\");\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Reset=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET GroupValue=(SELECT Value FROM C_BP_Group g WHERE g.IsDefault='Y'\" + \" AND g.AD_Client_ID=i.AD_Client_ID AND ROWNUM=1) \" + \"WHERE GroupValue IS NULL AND C_BP_Group_ID IS NULL\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Set Group Default=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET C_BP_Group_ID=(SELECT C_BP_Group_ID FROM C_BP_Group g\" + \" WHERE i.GroupValue=g.Value AND g.AD_Client_ID=i.AD_Client_ID ORDER BY g.IsDefault DESC LIMIT 1) \" + \"WHERE C_BP_Group_ID IS NULL\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Set Group=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner \" + \"SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'\" + getMsg(\"ImportBPInvalidGroup\") + \". ' \" + \"WHERE C_BP_Group_ID IS NULL\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(\"Invalid Group=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET CountryCode=(SELECT CountryCode FROM C_Country c WHERE c.isactive='Y'\" + \" AND c.AD_Client_ID IN (0, i.AD_Client_ID) AND ROWNUM=1) \" + \"WHERE CountryCode IS NULL AND C_Country_ID IS NULL\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Set Country Default=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c\" + \" WHERE i.CountryCode=c.CountryCode AND c.AD_Client_ID IN (0, i.AD_Client_ID)) \" + \"WHERE C_Country_ID IS NULL\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Set Country=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner \" + \"SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'\" + getMsg(\"ImportBPInvalidCountry\") + \". ' \" + \"WHERE C_Country_ID IS NULL\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(\"Invalid Country=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"Set RegionName=(SELECT Name FROM C_Region r\" + \" WHERE r.IsDefault='Y' AND r.C_Country_ID=i.C_Country_ID\" + \" AND r.AD_Client_ID IN (0, i.AD_Client_ID) AND ROWNUM=1) \" + \"WHERE RegionName IS NULL AND C_Region_ID IS NULL\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Set Region Default=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r\" + \" WHERE r.Name=i.RegionName AND r.C_Country_ID=i.C_Country_ID\" + \" AND r.AD_Client_ID IN (0, i.AD_Client_ID)) \" + \"WHERE C_Region_ID IS NULL\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Set Region=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'\" + getMsg(\"ImportBPInvalidRegion\") + \". ' \" + \" WHERE C_Region_ID IS NULL \" + \" AND EXISTS (SELECT * FROM C_Country c\" + \" WHERE c.C_Country_ID=i.C_Country_ID AND c.HasRegion='Y')\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(\"Invalid Region=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET BPContactGreeting=NULL WHERE C_Greeting_ID IS NULL AND char_length(trim(BPContactGreeting)) = 0 AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Reset Greeting=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET C_Greeting_ID=(SELECT C_Greeting_ID FROM C_Greeting g\" + \" WHERE i.BPContactGreeting=g.Name AND g.AD_Client_ID IN (0, i.AD_Client_ID)) \" + \"WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Set Greeting=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'\" + getMsg(\"ImportBPInvalidGreeting\") + \". ' \" + \"WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL\" + \" AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(\"Invalid Greeting=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p\" + \" WHERE i.Value=p.Value AND p.AD_Client_ID=i.AD_Client_ID) \" + \"WHERE C_BPartner_ID IS NULL AND Value IS NOT NULL\" + \" AND I_IsImported='N'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Found BPartner=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET AD_User_ID=(SELECT AD_User_ID FROM AD_User c\" + \" WHERE i.ContactName=c.Name AND i.C_BPartner_ID=c.C_BPartner_ID AND c.AD_Client_ID=i.AD_Client_ID) \" + \"WHERE C_BPartner_ID IS NOT NULL AND AD_User_ID IS NULL AND ContactName IS NOT NULL\" + \" AND I_IsImported='N'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Found Contact=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET C_BPartner_Location_ID=(SELECT C_BPartner_Location_ID\" + \" FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)\" + \" WHERE i.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=i.AD_Client_ID\" + \" AND DUMP(i.Address1)=DUMP(l.Address1) AND DUMP(i.Address2)=DUMP(l.Address2)\" + \" AND DUMP(i.City)=DUMP(l.City) AND DUMP(i.Postal)=DUMP(l.Postal) AND DUMP(i.Postal_Add)=DUMP(l.Postal_Add)\" + \" AND DUMP(i.C_Region_ID)=DUMP(l.C_Region_ID) AND DUMP(i.C_Country_ID)=DUMP(l.C_Country_ID)) \" + \"WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL\" + \" AND I_IsImported='N'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Found Location=\" + no);\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET C_Categoria_IVA_Codigo=\" + MCategoriaIva.CONSUMIDOR_FINAL + \" WHERE (C_Categoria_IVA_Codigo IS NULL OR C_Categoria_IVA_Codigo = 0) \" + \"  AND I_IsImported='N'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET C_Categoria_IVA_ID= \" + \" (SELECT C_Categoria_IVA_ID \" + \"  FROM C_Categoria_IVA c \" + \"  WHERE i.C_Categoria_IVA_Codigo=c.Codigo AND c.AD_Client_ID=i.AD_Client_ID \" + \" ) \" + \"WHERE C_Categoria_IVA_ID IS NULL \" + \"  AND I_IsImported='N'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET SalesRep_ID=(SELECT AD_User_ID \" + \"FROM AD_User u \" + \"WHERE u.Name = i.SalesRep_Name AND u.AD_Client_ID IN (0, i.AD_Client_ID)) \" + \"WHERE SalesRep_ID IS NULL \" + \"AND I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(\"Set Country=\" + no);\n        int noInsert = 0;\n        int noUpdate = 0;\n        sql = new StringBuffer(\"SELECT I_BPartner_ID, C_BPartner_ID,\" + \"C_BPartner_Location_ID,COALESCE(Address1,Address2,City,RegionName,CountryCode),\" + \"AD_User_ID,ContactName \" + \"FROM I_BPartner \" + \"WHERE I_IsImported='N'\").append(clientCheck);\n        Connection conn = DB.createConnection(false, Connection.TRANSACTION_READ_COMMITTED);\n        try {\n            log.info(\"En importBPartbner antes de hacer el update en c_BPartner\");\n            PreparedStatement pstmt_updateBPartner = conn.prepareStatement(\"UPDATE C_BPartner \" + \"SET Value=aux.Value\" + \",Name=aux.Name\" + \",Name2=aux.Name2\" + \",Description=aux.Description\" + \",DUNS=aux.DUNS\" + \",TaxID=aux.TaxID\" + \",NAICS=aux.NAICS\" + \",C_BP_Group_ID=aux.C_BP_Group_ID\" + \",Updated=current_timestamp\" + \",UpdatedBy=aux.UpdatedBy\" + \",IIBB=aux.IIBB\" + \" from (SELECT Value,Name,Name2,Description,DUNS,TaxID,NAICS,C_BP_Group_ID,UpdatedBy,IIBB FROM I_BPartner WHERE I_BPartner_ID=?) as aux\" + \" WHERE C_BPartner_ID=?\");\n            log.info(\"En importBPartbner despues de hacer el update en c_BPartner\");\n            PreparedStatement pstmt_insertLocation = conn.prepareStatement(\"INSERT INTO C_Location (C_Location_ID,\" + \"AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,\" + \"Address1,Address2,City,Postal,Postal_Add,C_Country_ID,C_Region_ID) \" + \"SELECT ?,\" + \"AD_Client_ID,AD_Org_ID,'Y',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,\" + \"Address1,Address2,City,Postal,Postal_Add,C_Country_ID,C_Region_ID \" + \"FROM I_BPartner \" + \"WHERE I_BPartner_ID=?\");\n            PreparedStatement pstmt_insertBPLocation = conn.prepareStatement(\"INSERT INTO C_BPartner_Location ( \" + \"\tC_BPartner_Location_ID,\" + \"\tAD_Client_ID,\" + \"\tAD_Org_ID,\" + \"\tIsActive,\" + \"\tCreated,\" + \"\tCreatedBy,\" + \"\tUpdated,\" + \"\tUpdatedBy,\" + \"\tName,\" + \"\tIsBillTo,\" + \"\tIsShipTo,\" + \"\tIsPayFrom,\" + \"\tIsRemitTo,\" + \"\tPhone,\" + \"\tPhone2,\" + \"\tFax,\" + \"\tC_BPartner_ID,\" + \"\tC_Location_ID) \" + \"SELECT ?,AD_Client_ID,AD_Org_ID,'Y',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,\" + \"CASE WHEN char_length(trim(coalesce(address1,''))) > 0 THEN address1 \" + \"     WHEN char_length(trim(coalesce(city,''))) > 0 THEN city \" + \"     WHEN char_length(trim(coalesce(regionname,''))) > 0 THEN regionname \" + \"     ELSE name \" + \"END,\" + \"'Y','Y','Y','Y',\" + \"Phone,Phone2,Fax, ?,? \" + \"FROM I_BPartner \" + \"WHERE I_BPartner_ID=?\");\n            PreparedStatement pstmt_insertBPContact = conn.prepareStatement(\"INSERT INTO AD_User (AD_User_ID,\" + \"AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,\" + \"C_BPartner_ID,C_BPartner_Location_ID,C_Greeting_ID,\" + \"Name,Title,Description,Comments,Phone,Phone2,Fax,EMail,Birthday) \" + \"SELECT ?,\" + \"AD_Client_ID,AD_Org_ID,'Y',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,\" + \"?,?,C_Greeting_ID,\" + \"ContactName,Title,ContactDescription,Comments,Phone,Phone2,Fax,EMail,Birthday \" + \"FROM I_BPartner \" + \" WHERE I_BPartner_ID=?\");\n            PreparedStatement pstmt_updateBPContact = conn.prepareStatement(\"UPDATE AD_User \" + \"SET C_Greeting_ID=aux1.C_Greeting_ID\" + \",Name=aux1.Name\" + \",Title=aux1.Title\" + \",Description=aux1.Description\" + \",Comments=aux1.Commets\" + \",Phone=aux1.Phone\" + \",Phone2=aux1.Phone2\" + \",Fax=aux1.Fax\" + \",EMail=aux1.EMail\" + \",Birthday=aux1.Birthaday\" + \",Updated=current_timestamp\" + \",UpdatedBy=aux1.UpdatedBy\" + \" from (SELECT C_Greeting_ID,ContactName,Title,ContactDescription,Comments,Phone,Phone2,Fax,EMail,Birthday,UpdatedBy FROM I_BPartner WHERE I_BPartner_ID=?) as aux1\" + \" WHERE AD_User_ID=?\");\n            PreparedStatement pstmt_setImported = conn.prepareStatement(\"UPDATE I_BPartner SET I_IsImported='Y',\" + \" C_BPartner_ID=?, C_BPartner_Location_ID=?, AD_User_ID=?, \" + \" Updated=current_timestamp, Processed='Y' WHERE I_BPartner_ID=?\");\n            PreparedStatement pstmt = DB.prepareStatement(sql.toString());\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                int I_BPartner_ID = rs.getInt(1);\n                int C_BPartner_ID = rs.getInt(2);\n                boolean newBPartner = C_BPartner_ID == 0;\n                int C_BPartner_Location_ID = rs.getInt(3);\n                String newLocali = rs.getString(4);\n                boolean newLocation = rs.getString(4) != null;\n                int AD_User_ID = rs.getInt(5);\n                boolean newContact = rs.getString(6) != null;\n                log.fine(\"I_BPartner_ID=\" + I_BPartner_ID + \", C_BPartner_ID=\" + C_BPartner_ID + \", C_BPartner_Location_ID=\" + C_BPartner_Location_ID + \" create=\" + newLocation + \", AD_User_ID=\" + AD_User_ID + \" create=\" + newContact);\n                if (newBPartner) {\n                    X_I_BPartner iBP = new X_I_BPartner(getCtx(), I_BPartner_ID, null);\n                    MBPartner bp = new MBPartner(iBP);\n                    if (bp.save()) {\n                        C_BPartner_ID = bp.getC_BPartner_ID();\n                        log.finest(\"Insert BPartner\");\n                        noInsert++;\n                    } else {\n                        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||\").append(DB.TO_STRING(\"Insert BPartner failed: \" + CLogger.retrieveErrorAsString())).append(\" WHERE I_BPartner_ID=\").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                } else {\n                    pstmt_updateBPartner.setInt(1, I_BPartner_ID);\n                    pstmt_updateBPartner.setInt(2, C_BPartner_ID);\n                    try {\n                        no = pstmt_updateBPartner.executeUpdate();\n                        log.finest(\"Update BPartner = \" + no);\n                        noUpdate++;\n                    } catch (SQLException ex) {\n                        log.finest(\"Update BPartner -- \" + ex.toString());\n                        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||\").append(DB.TO_STRING(\"Update BPartner: \" + ex.toString())).append(\" WHERE I_BPartner_ID=\").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                }\n                if (C_BPartner_Location_ID != 0) {\n                } else if (newLocation) {\n                    int C_Location_ID = 0;\n                    try {\n                        C_Location_ID = DB.getNextID(m_AD_Client_ID, \"C_Location\", null);\n                        if (C_Location_ID <= 0) {\n                            throw new DBException(\"No NextID (\" + C_Location_ID + \")\");\n                        }\n                        pstmt_insertLocation.setInt(1, C_Location_ID);\n                        pstmt_insertLocation.setInt(2, I_BPartner_ID);\n                        no = pstmt_insertLocation.executeUpdate();\n                        log.finest(\"Insert Location = \" + no);\n                    } catch (SQLException ex) {\n                        log.finest(\"Insert Location - \" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||\").append(DB.TO_STRING(\"Insert Location: \" + ex.toString())).append(\" WHERE I_BPartner_ID=\").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                    try {\n                        C_BPartner_Location_ID = (DB.getNextID(m_AD_Client_ID, \"C_BPartner_Location\", null));\n                        log.finest(\"C_BPartner_Location_ID es : \" + C_BPartner_Location_ID);\n                        if (C_BPartner_Location_ID <= 0) {\n                            throw new DBException(\"No NextID (\" + C_BPartner_Location_ID + \")\");\n                        }\n                        pstmt_insertBPLocation.setInt(1, C_BPartner_Location_ID);\n                        pstmt_insertBPLocation.setInt(2, C_BPartner_ID);\n                        pstmt_insertBPLocation.setInt(3, C_Location_ID);\n                        pstmt_insertBPLocation.setInt(4, I_BPartner_ID);\n                        no = pstmt_insertBPLocation.executeUpdate();\n                        log.finest(\"Insert BP Location = \" + no);\n                    } catch (Exception ex) {\n                        log.finest(\"Insert BPLocation - \" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||\").append(DB.TO_STRING(\"Insert BPLocation: \" + ex.toString())).append(\" WHERE I_BPartner_ID=\").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                }\n                if (AD_User_ID != 0) {\n                    pstmt_updateBPContact.setInt(1, I_BPartner_ID);\n                    pstmt_updateBPContact.setInt(2, AD_User_ID);\n                    try {\n                        no = pstmt_updateBPContact.executeUpdate();\n                        log.finest(\"Update BP Contact = \" + no);\n                    } catch (SQLException ex) {\n                        log.finest(\"Update BP Contact - \" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||\").append(DB.TO_STRING(\"Update BP Contact: \" + ex.toString())).append(\" WHERE I_BPartner_ID=\").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                } else if (newContact) {\n                    try {\n                        AD_User_ID = DB.getNextID(m_AD_Client_ID, \"AD_User\", null);\n                        if (AD_User_ID <= 0) {\n                            throw new DBException(\"No NextID (\" + AD_User_ID + \")\");\n                        }\n                        pstmt_insertBPContact.setInt(1, AD_User_ID);\n                        pstmt_insertBPContact.setInt(2, C_BPartner_ID);\n                        if (C_BPartner_Location_ID == 0) {\n                            pstmt_insertBPContact.setNull(3, Types.NUMERIC);\n                        } else {\n                            pstmt_insertBPContact.setInt(3, C_BPartner_Location_ID);\n                        }\n                        pstmt_insertBPContact.setInt(4, I_BPartner_ID);\n                        no = pstmt_insertBPContact.executeUpdate();\n                        log.finest(\"Insert BP Contact = \" + no);\n                    } catch (Exception ex) {\n                        log.finest(\"Insert BPContact - \" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(\"UPDATE I_BPartner i \" + \"SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||\").append(DB.TO_STRING(\"Insert BPContact: \" + ex.toString())).append(\" WHERE I_BPartner_ID=\").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                }\n                pstmt_setImported.setInt(1, C_BPartner_ID);\n                if (C_BPartner_Location_ID == 0) {\n                    pstmt_setImported.setNull(2, Types.NUMERIC);\n                } else {\n                    pstmt_setImported.setInt(2, C_BPartner_Location_ID);\n                }\n                if (AD_User_ID == 0) {\n                    pstmt_setImported.setNull(3, Types.NUMERIC);\n                } else {\n                    pstmt_setImported.setInt(3, AD_User_ID);\n                }\n                pstmt_setImported.setInt(4, I_BPartner_ID);\n                no = pstmt_setImported.executeUpdate();\n                conn.commit();\n            }\n            rs.close();\n            pstmt.close();\n            pstmt_updateBPartner.close();\n            pstmt_insertLocation.close();\n            pstmt_insertBPLocation.close();\n            pstmt_insertBPContact.close();\n            pstmt_updateBPContact.close();\n            pstmt_setImported.close();\n            conn.close();\n            conn = null;\n        } catch (SQLException e) {\n            try {\n                if (conn != null) {\n                    conn.close();\n                }\n                conn = null;\n            } catch (SQLException ex) {\n            }\n            throw new Exception(\"ImportBPartner.doIt\", e);\n        } finally {\n            if (conn != null) {\n                conn.close();\n            }\n            conn = null;\n        }\n        sql = new StringBuffer(\"UPDATE I_BPartner \" + \"SET I_IsImported='N', Updated=current_timestamp \" + \"WHERE I_IsImported<>'Y'\").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        addLog(0, null, new BigDecimal(no), \"@Errors@\");\n        addLog(0, null, new BigDecimal(noInsert), \"@C_BPartner_ID@: @Inserted@\");\n        addLog(0, null, new BigDecimal(noUpdate), \"@C_BPartner_ID@: @Updated@\");\n        return \"\";\n    }\n", "id": 3}
{"label": "1", "func1":"    @Override\n    public InputStream getInputStream() throws IOException {\n        if (dfos == null) {\n            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();\n            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, \".\" + Definitions.TMP_EXTENSION);\n            try {\n                IOUtils.copy(is, dfos);\n            } finally {\n                dfos.close();\n            }\n        }\n        return dfos.getDeferredInputStream();\n    }\n", "func2":"    private String storeEditionFile(InputStream in) throws IOException {\n        String datadir = getCqPropertiesBeanSpring().getDatadir() + File.separator + \"attachments\" + File.separator;\n        File attachmentsDir = new File(datadir);\n        attachmentsDir.mkdirs();\n        File storedEditionFile = File.createTempFile(\"edition_import_\", \".tmp\", attachmentsDir);\n        FileOutputStream out = new FileOutputStream(storedEditionFile);\n        IOUtils.copyLarge(in, out);\n        IOUtils.closeQuietly(out);\n        IOUtils.closeQuietly(in);\n        return storedEditionFile.getAbsolutePath();\n    }\n", "id": 4}
{"label": "1", "func1":"    public static void copy(String source, String dest) throws java.io.IOException {\n        java.io.BufferedInputStream in = null;\n        java.io.BufferedOutputStream out = null;\n        try {\n            in = new java.io.BufferedInputStream(new java.io.FileInputStream(source), 1000);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(dest), 1000);\n            while (in.available() != 0) {\n                out.write(in.read());\n            }\n        } catch (java.io.IOException e) {\n            throw e;\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n                if (out != null) {\n                    out.close();\n                }\n            } catch (java.io.IOException E) {\n            }\n        }\n    }\n", "func2":"    public static void copyFile(File source, File dest) throws IOException {\n        log.debug(\"Copy from {} to {}\", source.getAbsoluteFile(), dest.getAbsoluteFile());\n        FileInputStream fi = new FileInputStream(source);\n        FileChannel fic = fi.getChannel();\n        MappedByteBuffer mbuf = fic.map(FileChannel.MapMode.READ_ONLY, 0, source.length());\n        fic.close();\n        fi.close();\n        fi = null;\n        if (!dest.exists()) {\n            String destPath = dest.getPath();\n            log.debug(\"Destination path: {}\", destPath);\n            String destDir = destPath.substring(0, destPath.lastIndexOf(File.separatorChar));\n            log.debug(\"Destination dir: {}\", destDir);\n            File dir = new File(destDir);\n            if (!dir.exists()) {\n                if (dir.mkdirs()) {\n                    log.debug(\"Directory created\");\n                } else {\n                    log.warn(\"Directory not created\");\n                }\n            }\n            dir = null;\n        }\n        FileOutputStream fo = new FileOutputStream(dest);\n        FileChannel foc = fo.getChannel();\n        foc.write(mbuf);\n        foc.close();\n        fo.close();\n        fo = null;\n        mbuf.clear();\n        mbuf = null;\n    }\n", "id": 5}
